#include <iostream>
#include <vector>
#include <fstream>

using namespace std;

class binary_three {
protected:
	binary_three* left, * right;
	long long value = 0;

public:
	binary_three();
	binary_three(long long value);
	void insert(binary_three*& root, long long n_value);
	friend ostream& operator<< (ostream& out, binary_three*& three);
};

binary_three::binary_three() : left(nullptr), right(nullptr) {}

binary_three::binary_three(long long value) : left(nullptr), right(nullptr), value(value) {}

void binary_three::insert(binary_three*& root, long long n_value)
{
	if (!root)
		root = new binary_three(n_value);
	else if (n_value > root->value) {
		if (!root->right)
			root->right = new binary_three(n_value);
		else
			insert(root->right, n_value);
	}
	else if (n_value < root->value) {
		if (!root->left)
			root->left = new binary_three(n_value);
		else
			insert(root->left, n_value);
	}
}

ostream& operator<<(ostream& out, binary_three*& three)
{
	if (!three) return out;
	out << three->value << "\n";
	out << three->left;
	out << three->right;
	return out;
}


int main() {
	ifstream fin("input.txt");
	ofstream fout("output.txt");

	binary_three* root = nullptr;
	long long val;
	while (fin >> val)
		root->insert(root, val);
	
	fout << root;
	return 0;
}